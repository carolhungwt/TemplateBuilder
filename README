********************************************
**           TemplateBuilder              **
**                                        **
**       README version 15/01/14          **
**                                        **
********************************************

Contact: sauvan[AT]llr.in2p3.fr

This tool is able to build templates from events stored in a TTree. 2D and 3D templates (TH2F & TH3F) can be built.
Templates are defined by the user in a JSON file (JavaScript Object Notation). It is parsed by the tool and templates are built according to the specifications.

----------------------
1) Running the program
----------------------
The program needs ROOT in order to compile and run. So please make sure that ROOT is correctly setup in your environment.

Compilation:
> make

Clean area:
> make clean

Run with:
> ./buildTemplate.exe run/my-template-definition.json

the run/ directory is intended to store the template definitions. There are two example files already in this directory: run/templates2DExample.json and run/templates3DExample.json.
The syntax of these definition files is detailed in the next section.

------------------
2) Template syntax
------------------
2)-1- General
-------------
NB: The JSON syntax is used. More details can be found on the web. Only the specific syntax is detailed here.

The file starts and ends with brackets {} surrounding the parameters. Lines starting with // are comments.
Several objects/variables are defined, at different levels. Top level ones are:
- inputDirectory: location of input trees
- outputFile    : output file containing the templates
- templates     : a list of template definitions

Then for each template in the list several variables can be defined:
- name     : the name of the template (don't use the same name for several templates)
- files    : the list of input tree files in the directory defined by 'inputDirectory'.
- tree     : the name of the tree in the files
- variables: template variables, 2 for 2D, 3 for 3D. The names correspond to those in the tree.
- weight   : if events are weighted. This is the weight to be applied when filling templates. The name correspond to the tree variable.
- selection: to apply an event selection. The variables used in the formula should be in the tree.
- assertion: to define an assertion. If it fails the program will stop.
- binning  : the binning of the template
- postprocessing: to modify the templates after it is filled. For instance smoothing, mirroring, etc. can be applied.
- rescaling: to rescale the template by the given number
!! In the future the "rescaling" and "postprocessing" keywords will be merged and improved to be able to control them more precisely !!

2)-2- Binning definition
------------------------
Two types of binning can be define:
- standard: fixed size bins
- adaptive: adaptive binning
The fixed size bins defined with the keyword 'bins', the value is a list [nbinsx, xmin, xmax, nbinsy, ymin, ymax], or [nbinsx, xmin, xmax, nbinsy, ymin, ymax, nbinsz, zmin, zmax] for 3D.
For adaptive binning the 'bins' keyword is used to specify the underlying binning, and 'entriesperbin' specify the minimum number of events per bin.

Example:
"binning":{
	"type":"adaptive",
	"bins":[100,0.,1.,100,-0.5,0.5],
	"entriesperbin":200
},

2)-3- Postprocessing
--------------------
A few postprocessing have been implemented for the moment:
- smooth_k5b     : smoothing with ROOT k5b kernel
- smooth_adaptive: smoothing with variable Gaussian kernel
- mirror         : mirroring
- mirror_inverse : anti-mirroring
- floor          : flooring
!! For the moment no parameter can be given. This will be added in the future !!

Example:
"postprocessing":[
	"smooth_adaptive",
	"mirror",
	"floor"
]
will smooth the template with a variable Gaussian kernel, mirror the second axis (for the moment the axis cannot be specified), and add a floor.

2)-4- Template sums
-------------------
Templates can also be produced from already created templates, by using the keyword 'templatesum'. 
It will make a linear combination of templates. A list of input templates with a multiplicative factor for each of them should be given:
[{"name":"templateName", "factor":1.},{...},...]
The keyword "name" corresponds to the name of an existing template.
The keyword "factor" corresponds to the factor to be applied to the template. It is a floating point. All the templates in the list will be added with the given factor. 

Example:
"templatesum":[
	{"name":"a","factor":1.},
	{"name":"b","factor":-1.},
	{"name":"c","factor":-1.}
],
will create a template a - b - c

